B = c(75, 85, 80)
C = c(90, 90, 60)
D = c(80, 80, 80)
A
B;C;D;
lan = c(70, 75, 90, 80)
eng = c(80, 85,
90, 80)
mat = c(90,
80,
60,
80)
lan;  eng;  mat;
category = factor( c('A', 'B', 'B', 'C', 'B') )
category
levels(category)
levels(category) = c('4.0', '3.0', '2.0')
category
as.numeric(category)
c(category)
category = factor( c('A', 'B', 'B', 'C', 'B') )
category
levels(category)
levels(category) = c('4.0', '3.0', '2.0')
category
as.numeric(category)
c(category)
as.character(category)
assign( 'x2', rep(1:4, 1:4) )
assign( 'y2', c('Today', 'Yesterday', 'Today', 'Tommorow') )
get( 'x2' )
paste('2016ÎÖÑ', rep('8Ïõî', 3), c('13Ïùº', '20Ïùº', '27Ïùº'))
matrix(c(70, 75, 90, 80, 80, 85, 90, 80, 90, 80, 60, 80), ncol=3)
score = matrix(c(70, 75, 90, 80, 80, 85, 90, 80, 90, 80, 60, 80), ncol=3)
score
as.numeric(category)
c(category)
category
c(category)
as.character(category)
class(category)
class(x2)
class(y2)
class(max)
##8 Sys.time()Î°ú ÌòÑÏû¨ÏãúÍ∞Ñ ÌôïÏù∏ÌïòÍ∏∞
time1 = Sys.time()
time1
time2 = Sys.time()
time2 - time1
matrix(c(70, 75, 90, 80, 80, 85, 90, 80, 90, 80, 60, 80), ncol=3)
score = matrix(c(70, 75, 90, 80, 80, 85, 90, 80, 90, 80, 60, 80), ncol=3)
score
nrow(score)
ncol(score)
dim(score)
m = 1:12
dim(m) = c(4,3)
m
m + 1
m + m
m * m
score2 = rbind(A, B, C, D)
score2
score3 = cbind(lan, eng, mat)
score3
colnames(score3)
rownames(score3)
rownames(score3) = c('A', 'B', 'C', 'D')
score3
score3[ ,  ]
score3[2,  ]
score3[ , 3]
score3[2, 3]
score3
score3[2, 3] = 0
score3
array(data = 1:18, dim=c(3,3,2))
x <- c(3,4)
3+4+5+6
1+2
1+2
4+5
(3*4/12)+sqrt(4)^2
31 %/% 7
31 %% 7
"d"
c('A', 'B')
'A', 'B'
11:15
sum(11:15)
c(1, 3, 6)
rep(10, 3)
rep(1:2, 3)
rep(1:2, c(2,3))
seq(1, 10, 5)
seq(1, 10, by=5)
seq(1, 10, length=5)
1:10 + 100
2:4  * 10
3 > 0
3 < 0
1:5 >= 3
7 == 8
7 != 8
1:5 >= 3
all( 1:5 < 4)
any( 1:5 < 4)
(1:5 < 4) & (2:6 >= 4)
(1:5 < 4) | (2:6 >= 4)
(1:5 < 4) & (2:6 >= 4)
TRUE
FALSE
TRUE + FALSE + TRUE + 1
v = 5
w = 10
if (v==0) w = 0 else w = w/v
w
v = 5
w = 10
if (v==0) w = 0 else w = w/v
w
factor( c('A','B','B') )
c('A','B','B')
factor( c('A','B','B') )
factor( 1:10 %% 3 )
A = c(70, 80, 90)
A = c(70, 80, 90)
B = c(75, 85, 80)
C = c(90, 90, 60)
D = c(80, 80, 80)
A
B;C;D;
lan = c(70, 75, 90, 80)
eng = c(80, 85,
90, 80)
eng = c(80, 85,
90, 80)
mat = c(90,
80,
60,
80)
lan;  eng;  mat;
category = factor( c('A', 'B', 'B', 'C', 'B') )
category
levels(category)
category
levels(category) = c('4.0', '3.0', '2.0')
category
sqrt((((3+49-2)2)/10)^2)
(((3+49-2)2)/10)^2
3_49
3+49
(3+49)-2
sqrt(((3+49-2)*2)/10)^2
c(3,4)
```{r, echo=False}
x <- 1:100
?seq()
seq(1,1000, by= 5)
seq(1, 1000, length = 100)
Reproducible research_1
==============================
(#steps #median #mean #maximum #plot)
#Loading and preprocessing the data
Load the data
```{r}
setwd("~/Library/Mobile Documents/com~apple~CloudDocs/study_files/coursera/5. Reproducible Research")
data <- read.csv("activity.csv", header = T, sep = ",")
View(data)
```
##What is mean total number of steps taken per day?
1. Calculate the total number of steps taken per day
2. Make a histogram of the total number of steps taken each day
```{r}
library(plyr)
library(dplyr)
sum <- tapply(data$steps, data$date, sum, na.rm = T)
hist(sum, xlab = "sum, steps per day", main = "steps per day")
```
3. Calculate and report the mean and median of the total number of steps taken per day
```{r}
mean_sum <- mean(sum)
median_sum <- median(sum)
result1 <- c("the mean is", mean_sum)
result2 <- c("the median is", median_sum)
paste(result1, collapse = " ")
paste(result2, collapse = " ")
```
##What is the average daily activity pattern?
1. Make a time series plot (i.e. ùöùùö¢ùöôùöé = "ùöï") of the 5-minute interval (x-axis) and the average number of steps taken, averaged across all days (y-axis)
```{r}
interval <- tapply(data$steps, data$interval, mean, na.rm=T)
View(interval)
plot(interval ~ unique(data$interval), type="l", xlab= "5 minute interval")
```
2. Which 5-minute interval, on average across all the days in the dataset, contains the maximum number of steps?
```{r}
interval[which.max(interval)]
```
##Imputing Missing Values
1.Calculate and report the total number of missing values in the dataset (i.e. the total number of rows with ùôΩùô∞s)
```{r}
table(is.na(data))
```
2. Devise a strategy for filling in all of the missing values in the dataset. The strategy does not need to be sophisticated. For example, you could use the mean/median for that day, or the mean for that 5-minute interval, etc.
**strategy chosen: fill in with the mean
3. Create a new dataset that is equal to the original dataset but with the missing data filled in.
```{r}
data$steps[is.na(data$steps)] <- mean(data$steps, na.rm = T)
```
4. Make a histogram of the total number of steps taken each day and Calculate and report the mean and median total number of steps taken per day.
```{r}
data2 <- tapply(data$steps, data$date, sum, na.rm= T)
hist(data2, xlab = "sum of steps per day", main = "histogram of steps per day")
mean_data2 <- mean(data2)
median_data2 <- median(data2)
result3 <- c("the mean is", mean_data2)
result4 <- c("the median is", median_data2)
paste(result3, collapse = " ")
paste(result4, collapse = " ")
```
Do these values differ from the estimates from the first part of the assignment?
```{r}
df_summary <- rbind(data.frame(mean = c(mean_sum, mean_data2), median = c(median_sum, median_data2)))
rownames(df_summary) <- c("with NA's", "without NA's")
print(df_summary)
```
Q: What is the impact of imputing missing data on the estimates of the total daily number of steps?
A: it becomes less skewed after imputing missing value with mean value of steps.
##Are there differences in activity patterns between weekdays and weekends?
1. Create a new factor variable in the dataset with two levels ‚Äì ‚Äúweekday‚Äù and ‚Äúweekend‚Äù indicating whether a given date is a weekday or weekend day.
```{r}
data$date <- as.Date(data$date)
data$weekdays <- weekdays(data$date)
data$weekdays[c(data$weekdays == "ÌÜ†ÏöîÏùº" | data$weekdays == "ÏùºÏöîÏùº")] <- "weekend"
data$weekdays[!data$weekdays == "weekend"] <- "weekday"
week_summary <- ddply(data, c("interval", "weekdays"), function(x) apply(x[1],
2, mean))
head(week_summary)
```
2. Make a panel plot containing a time series plot (i.e. ùöùùö¢ùöôùöé = "ùöï") of the 5-minute interval (x-axis) and the average number of steps taken, averaged across all weekday days or weekend days (y-axis). See the README file in the GitHub repository to see an example of what this plot should look like using simulated data.
```{r}
library(lattice)
xyplot(week_summary$steps ~ week_summary$interval | week_summary$weekdays,
type="l",
lwd=1,
xlab="Interval",
ylab="Number of steps",
layout=c(1,2))
```
setwd("~/Library/Mobile Documents/com~apple~CloudDocs/study_files/coursera/5. Reproducible Research")
library(plyr)
library(dplyr)
sum <- tapply(data$steps, data$date, sum, na.rm = T)
hist(sum, xlab = "sum, steps per day", main = "steps per day")
plot(interval ~ unique(data$interval), type="l", xlab= "5 minute interval")
data2 <- tapply(data$steps, data$date, sum, na.rm= T)
hist(data2, xlab = "sum of steps per day", main = "histogram of steps per day")
mean_data2 <- mean(data2)
median_data2 <- median(data2)
result3 <- c("the mean is", mean_data2)
result4 <- c("the median is", median_data2)
paste(result3, collapse = " ")
paste(result4, collapse = " ")
df_summary <- rbind(data.frame(mean = c(mean_sum, mean_data2), median = c(median_sum, median_data2)))
rownames(df_summary) <- c("with NA's", "without NA's")
print(df_summary)
data$date <- as.Date(data$date)
data$weekdays <- weekdays(data$date)
data$weekdays[c(data$weekdays == "ÌÜ†ÏöîÏùº" | data$weekdays == "ÏùºÏöîÏùº")] <- "weekend"
data$weekdays[!data$weekdays == "weekend"] <- "weekday"
week_summary <- ddply(data, c("interval", "weekdays"), function(x) apply(x[1],
2, mean))
head(week_summary)
xyplot(week_summary$steps ~ week_summary$interval | week_summary$weekdays,
type="l",
lwd=1,
xlab="Interval",
ylab="Number of steps",
layout=c(1,2))
data$date <- as.Date(data$date)
data$weekdays <- weekdays(data$date)
data$weekdays[c(data$weekdays == "ÌÜ†ÏöîÏùº" | data$weekdays == "ÏùºÏöîÏùº")] <- "weekend"
data$weekdays[!data$weekdays == "weekend"] <- "weekday"
week_summary <- ddply(data, c("interval", "weekdays"), function(x) apply(x[1],
2, mean))
head(week_summary)
library(lattice)
xyplot(week_summary$steps ~ week_summary$interval | week_summary$weekdays,
type="l",
lwd=1,
xlab="Interval",
ylab="Number of steps",
layout=c(1,2))
Reproducible research_1
==============================
(#steps #median #mean #maximum #plot)
#Loading and preprocessing the data
Load the data
```{r}
setwd("~/Library/Mobile Documents/com~apple~CloudDocs/study_files/coursera/5. Reproducible Research")
data <- read.csv("activity.csv", header = T, sep = ",")
View(data)
```
##What is mean total number of steps taken per day?
1. Calculate the total number of steps taken per day
2. Make a histogram of the total number of steps taken each day
```{r}
library(plyr)
library(dplyr)
sum <- tapply(data$steps, data$date, sum, na.rm = T)
hist(sum, xlab = "sum, steps per day", main = "steps per day")
```
3. Calculate and report the mean and median of the total number of steps taken per day
```{r}
mean_sum <- mean(sum)
median_sum <- median(sum)
result1 <- c("the mean is", mean_sum)
result2 <- c("the median is", median_sum)
paste(result1, collapse = " ")
paste(result2, collapse = " ")
```
##What is the average daily activity pattern?
1. Make a time series plot (i.e. ùöùùö¢ùöôùöé = "ùöï") of the 5-minute interval (x-axis) and the average number of steps taken, averaged across all days (y-axis)
```{r}
interval <- tapply(data$steps, data$interval, mean, na.rm=T)
View(interval)
plot(interval ~ unique(data$interval), type="l", xlab= "5 minute interval")
```
2. Which 5-minute interval, on average across all the days in the dataset, contains the maximum number of steps?
```{r}
interval[which.max(interval)]
```
##Imputing Missing Values
1.Calculate and report the total number of missing values in the dataset (i.e. the total number of rows with ùôΩùô∞s)
```{r}
table(is.na(data))
```
2. Devise a strategy for filling in all of the missing values in the dataset. The strategy does not need to be sophisticated. For example, you could use the mean/median for that day, or the mean for that 5-minute interval, etc.
**strategy chosen: fill in with the mean
3. Create a new dataset that is equal to the original dataset but with the missing data filled in.
```{r}
data$steps[is.na(data$steps)] <- mean(data$steps, na.rm = T)
```
4. Make a histogram of the total number of steps taken each day and Calculate and report the mean and median total number of steps taken per day.
```{r}
data2 <- tapply(data$steps, data$date, sum, na.rm= T)
hist(data2, xlab = "sum of steps per day", main = "histogram of steps per day")
mean_data2 <- mean(data2)
median_data2 <- median(data2)
result3 <- c("the mean is", mean_data2)
result4 <- c("the median is", median_data2)
paste(result3, collapse = " ")
paste(result4, collapse = " ")
```
Do these values differ from the estimates from the first part of the assignment?
```{r}
df_summary <- rbind(data.frame(mean = c(mean_sum, mean_data2), median = c(median_sum, median_data2)))
rownames(df_summary) <- c("with NA's", "without NA's")
print(df_summary)
```
Q: What is the impact of imputing missing data on the estimates of the total daily number of steps?
A: it becomes less skewed after imputing missing value with mean value of steps.
##Are there differences in activity patterns between weekdays and weekends?
1. Create a new factor variable in the dataset with two levels ‚Äì ‚Äúweekday‚Äù and ‚Äúweekend‚Äù indicating whether a given date is a weekday or weekend day.
```{r}
data$date <- as.Date(data$date)
data$weekdays <- weekdays(data$date)
data$weekdays[c(data$weekdays == "ÌÜ†ÏöîÏùº" | data$weekdays == "ÏùºÏöîÏùº")] <- "weekend"
data$weekdays[!data$weekdays == "weekend"] <- "weekday"
week_summary <- ddply(data, c("interval", "weekdays"), function(x) apply(x[1],
2, mean))
head(week_summary)
```
2. Make a panel plot containing a time series plot (i.e. ùöùùö¢ùöôùöé = "ùöï") of the 5-minute interval (x-axis) and the average number of steps taken, averaged across all weekday days or weekend days (y-axis). See the README file in the GitHub repository to see an example of what this plot should look like using simulated data.
```{r}
library(lattice)
xyplot(week_summary$steps ~ week_summary$interval | week_summary$weekdays,
type="l",
lwd=1,
xlab="Interval",
ylab="Number of steps",
layout=c(1,2))
```
data$date <- as.Date(data$date)
data$weekdays <- weekdays(data$date)
data$weekdays[c(data$weekdays == "ÌÜ†ÏöîÏùº" | data$weekdays == "ÏùºÏöîÏùº")] <- "weekend"
data$weekdays[!data$weekdays == "weekend"] <- "weekday"
week_summary <- ddply(data, c("interval", "weekdays"), function(x) apply(x[1],
2, mean))
head(week_summary)
Reproducible research_1
==============================
(#steps #median #mean #maximum #plot)
#Loading and preprocessing the data
Load the data
```{r}
setwd("~/Library/Mobile Documents/com~apple~CloudDocs/study_files/coursera/5. Reproducible Research")
data <- read.csv("activity.csv", header = T, sep = ",")
View(data)
```
##What is mean total number of steps taken per day?
1. Calculate the total number of steps taken per day
2. Make a histogram of the total number of steps taken each day
```{r}
library(plyr)
library(dplyr)
sum <- tapply(data$steps, data$date, sum, na.rm = T)
hist(sum, xlab = "sum, steps per day", main = "steps per day")
```
3. Calculate and report the mean and median of the total number of steps taken per day
```{r}
mean_sum <- mean(sum)
median_sum <- median(sum)
result1 <- c("the mean is", mean_sum)
result2 <- c("the median is", median_sum)
paste(result1, collapse = " ")
paste(result2, collapse = " ")
```
##What is the average daily activity pattern?
1. Make a time series plot (i.e. ùöùùö¢ùöôùöé = "ùöï") of the 5-minute interval (x-axis) and the average number of steps taken, averaged across all days (y-axis)
```{r}
interval <- tapply(data$steps, data$interval, mean, na.rm=T)
View(interval)
plot(interval ~ unique(data$interval), type="l", xlab= "5 minute interval")
```
2. Which 5-minute interval, on average across all the days in the dataset, contains the maximum number of steps?
```{r}
interval[which.max(interval)]
```
##Imputing Missing Values
1.Calculate and report the total number of missing values in the dataset (i.e. the total number of rows with ùôΩùô∞s)
```{r}
table(is.na(data))
```
2. Devise a strategy for filling in all of the missing values in the dataset. The strategy does not need to be sophisticated. For example, you could use the mean/median for that day, or the mean for that 5-minute interval, etc.
**strategy chosen: fill in with the mean
3. Create a new dataset that is equal to the original dataset but with the missing data filled in.
```{r}
data$steps[is.na(data$steps)] <- mean(data$steps, na.rm = T)
```
4. Make a histogram of the total number of steps taken each day and Calculate and report the mean and median total number of steps taken per day.
```{r}
data2 <- tapply(data$steps, data$date, sum, na.rm= T)
hist(data2, xlab = "sum of steps per day", main = "histogram of steps per day")
mean_data2 <- mean(data2)
median_data2 <- median(data2)
result3 <- c("the mean is", mean_data2)
result4 <- c("the median is", median_data2)
paste(result3, collapse = " ")
paste(result4, collapse = " ")
```
Do these values differ from the estimates from the first part of the assignment?
```{r}
df_summary <- rbind(data.frame(mean = c(mean_sum, mean_data2), median = c(median_sum, median_data2)))
rownames(df_summary) <- c("with NA's", "without NA's")
print(df_summary)
```
Q: What is the impact of imputing missing data on the estimates of the total daily number of steps?
A: it becomes less skewed after imputing missing value with mean value of steps.
##Are there differences in activity patterns between weekdays and weekends?
1. Create a new factor variable in the dataset with two levels ‚Äì ‚Äúweekday‚Äù and ‚Äúweekend‚Äù indicating whether a given date is a weekday or weekend day.
```{r}
data$date <- as.Date(data$date)
data$weekdays <- weekdays(data$date)
data$weekdays[c(data$weekdays == "ÌÜ†ÏöîÏùº" | data$weekdays == "ÏùºÏöîÏùº")] <- "weekend"
data$weekdays[!data$weekdays == "weekend"] <- "weekday"
week_summary <- ddply(data, c("interval", "weekdays"), function(x) apply(x[1],
2, mean))
head(week_summary)
```
2. Make a panel plot containing a time series plot (i.e. ùöùùö¢ùöôùöé = "ùöï") of the 5-minute interval (x-axis) and the average number of steps taken, averaged across all weekday days or weekend days (y-axis). See the README file in the GitHub repository to see an example of what this plot should look like using simulated data.
```{r}
library(lattice)
xyplot(week_summary$steps ~ week_summary$interval | week_summary$weekdays,
type="l",
lwd=1,
xlab="Interval",
ylab="Number of steps",
layout=c(1,2))
```
data$date <- as.Date(data$date)
data$weekdays <- weekdays(data$date)
data$weekdays[c(data$weekdays == "ÌÜ†ÏöîÏùº" | data$weekdays == "ÏùºÏöîÏùº")] <- "weekend"
data$weekdays[c(data$weekdays == "wendnesday" | data$weekdays == "sunday")] <- "weekend"
data$weekdays[!data$weekdays == "weekend"] <- "weekday"
week_summary <- ddply(data, c("interval", "weekdays"), function(x) apply(x[1],
2, mean))
head(week_summary)
library(lattice)
xyplot(week_summary$steps ~ week_summary$interval | week_summary$weekdays,
type="l",
lwd=1,
xlab="Interval",
ylab="Number of steps",
layout=c(1,2))
data$weekdays[c(data$weekdays == "wednesday" | data$weekdays == "sunday")] <- "weekend"
data$date <- as.Date(data$date)
data$weekdays <- weekdays(data$date)
data$weekdays[c(data$weekdays == "wednesday" | data$weekdays == "sunday")] <- "weekend"
data$weekdays[c(data$weekdays == "Saturday" | data$weekdays == "Sunday")] <- "weekend"
data$weekdays[!data$weekdays == "weekend"] <- "weekday"
week_summary <- ddply(data, c("interval", "weekdays"), function(x) apply(x[1],
2, mean))
head(week_summary)
library(lattice)
xyplot(week_summary$steps ~ week_summary$interval | week_summary$weekdays,
type="l",
lwd=1,
xlab="Interval",
ylab="Number of steps",
layout=c(1,2))
